<snippet>
	<content><![CDATA[
/**
 *
 * [ module ]
 * ${1:namespace} -> ${2:module}
 *
 */

( function( LC, \$ ) {

	"use strict";

	LC.$1 = LC.$1 || {};

	LC.$1.$2 = lcmodule( function( exports ) {

		exports.moduleName = "$1.$2";

		// "exports"" is always passed in, and always
		// returned at the end. Bind "ex" as it's easier to type
		// "_this" is used for private binding and maintaining scope

		var ex = exports = \$.extend( {}, window.lcmoduledefaults, exports ),
			_this = {};

		/**
		 * initialise the $2 module
		 */

		ex.init = function() {

			${3:// initialisation code }

			ex.events();
			ex.subscribe();

		};

		ex.events = function() {

		};

		ex.subscribe = function() {

		};

		return exports;

	}({}));

}( window.LC = window.LC || {}, jQuery ));

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lcmodule</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.js</scope>
</snippet>
